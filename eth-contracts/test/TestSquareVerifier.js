// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

    
// Test verification with incorrect proof


var Test = require('../config/testConfig.js');

contract('Verifier', async (accounts) => {

    const account = accounts[0];
    var config;
    var proof;
    var input;

    before('Contract Setup', async () => {
        config = await Test.Config(accounts);
        proof = config.proof;
        input = config.input;

    });

    describe('Correct Proof verification', function () {

        // Test verification with correct proof
        it('Verification of correct proof', async () => {
            const result = await config.verifier.verifyTx.call(
                proof.A,
                proof.A_p,
                proof.B,
                proof.B_p,
                proof.C,
                proof.C_p,
                proof.H,
                proof.K,
                input, 
                {from : account} 
            )
            console.log("The result is :" + result)
            assert(result, 'Proof is correct')
        })
    });

    describe('Incorrect Proof verification', function () {

        // Test verification with incorrect proof
        it('Verification of incorrect proof', async () => {
            const result = await config.verifier.verifyTx.call(
                proof.A,
                proof.A_p,
                proof.B,
                proof.B_p,
                proof.C,
                proof.C_p,
                proof.K,
                proof.H,
                input,
                {from : account} 
            )
            console.log("The result is :" + result)
            assert(!result, 'Incorrect Proof results')
        })
    });

});
